{"version":3,"sources":["social_icons/social.jsx","Typer/Typer.jsx","App.js","serviceWorker.js","index.js","Assets/Images/bannerImage.jpg"],"names":["Social","href","target","class","aria-hidden","React","Component","Typer","props","handleType","dataText","state","isDeleting","loopNum","text","typingSpeed","fullText","length","setState","substring","setTimeout","this","id","defaultProps","App","className","src","bannerImage","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8RAGqBA,E,uKAEb,OACI,6BACI,uBAAGC,KAAK,kCAAkCC,OAAO,UAC7C,uBAAGC,MAAM,wBAAwBC,cAAY,UAFrD,OAKA,uBAAGH,KAAK,iCAAiCC,OAAO,UACxC,uBAAGC,MAAM,uBAAuBC,cAAY,UANpD,OASA,uBAAGH,KAAK,qCAAqCC,OAAO,UAC5C,uBAAGC,MAAM,wBAAwBC,cAAY,UAVrD,OAaA,uBAAGH,KAAK,8BAA8BC,OAAO,UACrC,uBAAGC,MAAM,sBAAsBC,cAAY,e,GAjB3BC,IAAMC,W,iBCDrBC,E,kDAMjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAcVC,WAAa,WAAO,IACRC,EAAa,EAAKF,MAAlBE,SADO,EAEoC,EAAKC,MAAhDC,EAFO,EAEPA,WAAYC,EAFL,EAEKA,QAASC,EAFd,EAEcA,KAAMC,EAFpB,EAEoBA,YAE7BC,EAAWN,EADPG,EAAUH,EAASO,QAG7B,EAAKC,SAAS,CACVJ,KAAMF,EAAaI,EAASG,UAAU,EAAGL,EAAKG,OAAS,GAAKD,EAASG,UAAU,EAAGL,EAAKG,OAAS,GAChGF,YAAaH,EAAa,GAAK,MAG9BA,GAAcE,IAASE,EAIjBJ,GAAuB,KAATE,GAErB,EAAKI,SAAS,CACVN,YAAY,EACZC,QAASA,EAAU,IANvBO,YAAW,kBAAM,EAAKF,SAAS,CAAEN,YAAY,MAAS,KAW1DQ,WAAW,EAAKX,WAAYM,IApC5B,EAAKJ,MAAQ,CACTG,KAAM,GACNF,YAAY,EACZC,QAAS,EACTE,YAAa,KAPF,E,gEAYfM,KAAKZ,e,+BA+BL,OACI,6BACI,8BAAOY,KAAKV,MAAMG,MAClB,0BAAMQ,GAAG,gB,GApDUjB,IAAMC,WAApBC,EAEVgB,aAAe,CAClBb,SAAU,I,IC0BHc,E,uKArBX,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,4BAAQA,UAAU,cAChB,0BAAMA,UAAU,QACd,yBAAKA,UAAU,iBAAiBC,IAAKC,IAAaC,IAAI,WACtD,8CACA,4BACE,kBAAC,EAAD,CAAOlB,SAAU,CAAC,kBAAmB,qBAAsB,4BAE7D,yBAAKe,UAAU,UACb,kBAAC,EAAD,e,GAbEnB,aCIEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.3626f9fb.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-target-blank */\nimport React from 'react';\n\nexport default class Social extends React.Component {\n    render() {\n        return (\n            <div>\n                <a href=\"https://facebook.com/dragon7794\" target=\"_blank\">\n                    <i class=\"fa fa-facebook-square\" aria-hidden=\"true\"></i>\n                </a>\n                &nbsp;\n            <a href=\"https://twitter.com/mrunal7794\" target=\"_blank\">\n                    <i class=\"fa fa-twitter-square\" aria-hidden=\"true\"></i>\n                </a>\n                &nbsp;\n            <a href=\"https://linkedin.com/in/mrunal7794\" target=\"_blank\">\n                    <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"></i>\n                </a>\n                &nbsp;\n            <a href=\"https://github.com/mrunal77\" target=\"_blank\">\n                    <i class=\"fa fa-github-square\" aria-hidden=\"true\"></i>\n                </a>\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default class Typer extends React.Component {\n\n    static defaultProps = {\n        dataText: []\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            isDeleting: false,\n            loopNum: 0,\n            typingSpeed: 130\n        }\n    }\n\n    componentDidMount() {\n        this.handleType();\n    }\n\n    handleType = () => {\n        const { dataText } = this.props;\n        const { isDeleting, loopNum, text, typingSpeed } = this.state;\n        const i = loopNum % dataText.length;\n        const fullText = dataText[i];\n\n        this.setState({\n            text: isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1),\n            typingSpeed: isDeleting ? 30 : 150\n        });\n\n        if (!isDeleting && text === fullText) {\n\n            setTimeout(() => this.setState({ isDeleting: true }), 500);\n\n        } else if (isDeleting && text === '') {\n\n            this.setState({\n                isDeleting: false,\n                loopNum: loopNum + 1\n            });\n\n        }\n\n        setTimeout(this.handleType, typingSpeed);\n    };\n\n    render() {\n        return (\n            <div>\n                <span>{this.state.text}</span>\n                <span id=\"cursor\" />\n            </div>\n        );\n\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport bannerImage from './Assets/Images/bannerImage.jpg'\nimport './social_icons/social'\nimport Social from './social_icons/social';\nimport Tada from 'react-reveal/Tada';\nimport Typer from './Typer/Typer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Tada>\n          <header className=\"App-header\">\n            <card className=\"card\">\n              <img className=\"rounded-circle\" src={bannerImage} alt=\"Mrunal\" />\n              <h1>Mrunal Meshram</h1>\n              <h4>\n                <Typer dataText={[\"Hi I am Mrunal!\", \"This is my website\", \"I am a web developer.\"]} />\n              </h4>\n              <div className=\"awsome\">\n                <Social />\n              </div>\n            </card>\n          </header>\n        </Tada>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bannerImage.eee05f8b.jpg\";"],"sourceRoot":""}