{"version":3,"sources":["Assets/Images/bannerImage.jpg","social_icons/social.jsx","Typer/Typer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Social","React","Component","render","createElement","href","target","class","aria-hidden","Typer","constructor","props","super","handleType","dataText","this","isDeleting","loopNum","text","typingSpeed","state","fullText","length","setState","substring","setTimeout","componentDidMount","id","defaultProps","App","className","Tada","src","bannerImage","alt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,yC,sMCG5B,MAAMC,UAAeC,IAAMC,UACtCC,SACI,OACIF,IAAAG,cAAA,WACIH,IAAAG,cAAA,KAAGC,KAAK,kCAAkCC,OAAO,UAC7CL,IAAAG,cAAA,KAAGG,MAAM,wBAAwBC,cAAY,UAC7C,OAEJP,IAAAG,cAAA,KAAGC,KAAK,iCAAiCC,OAAO,UAC5CL,IAAAG,cAAA,KAAGG,MAAM,uBAAuBC,cAAY,UAC5C,OAEJP,IAAAG,cAAA,KAAGC,KAAK,qCAAqCC,OAAO,UAChDL,IAAAG,cAAA,KAAGG,MAAM,wBAAwBC,cAAY,UAC7C,OAEJP,IAAAG,cAAA,KAAGC,KAAK,8BAA8BC,OAAO,UACzCL,IAAAG,cAAA,KAAGG,MAAM,sBAAsBC,cAAY,UAC3C,OAEJP,IAAAG,cAAA,KAAGC,KAAK,2DAA2DC,OAAO,UACtEL,IAAAG,cAAA,KAAGG,MAAM,uBAAuBC,cAAY,Y,0BCtBjD,MAAMC,UAAcR,IAAMC,UAMrCQ,YAAYC,GACRC,MAAMD,GAAO,KAcjBE,WAAa,KACT,MAAM,SAAEC,GAAaC,KAAKJ,OACpB,WAAEK,EAAU,QAAEC,EAAO,KAAEC,EAAI,YAAEC,GAAgBJ,KAAKK,MAElDC,EAAWP,EADPG,EAAUH,EAASQ,QAG7BP,KAAKQ,SAAS,CACVL,KAAMF,EAAaK,EAASG,UAAU,EAAGN,EAAKI,OAAS,GAAKD,EAASG,UAAU,EAAGN,EAAKI,OAAS,GAChGH,YAAaH,EAAa,GAAK,MAG9BA,GAAcE,IAASG,EAIjBL,GAAuB,KAATE,GAErBH,KAAKQ,SAAS,CACVP,YAAY,EACZC,QAASA,EAAU,IANvBQ,WAAW,IAAMV,KAAKQ,SAAS,CAAEP,YAAY,IAAS,KAW1DS,WAAWV,KAAKF,WAAYM,IApC5BJ,KAAKK,MAAQ,CACTF,KAAM,GACNF,YAAY,EACZC,QAAS,EACTE,YAAa,KAIrBO,oBACIX,KAAKF,aA8BTV,SACI,OACIF,IAAAG,cAAA,WACIH,IAAAG,cAAA,YAAOW,KAAKK,MAAMF,MAClBjB,IAAAG,cAAA,QAAMuB,GAAG,aApDJlB,EAEVmB,aAAe,CAClBd,SAAU,ICGlB,MAAMe,UAAY3B,YAChBC,SACE,OACEF,IAAAG,cAAA,OAAK0B,UAAU,OACb7B,IAAAG,cAAC2B,IAAI,KACH9B,IAAAG,cAAA,UAAQ0B,UAAU,cAChB7B,IAAAG,cAAA,QAAM0B,UAAU,QACd7B,IAAAG,cAAA,OAAK0B,UAAU,iBAAiBE,IAAKC,IAAaC,IAAI,WACtDjC,IAAAG,cAAA,WACAH,IAAAG,cAAA,UAAI,kBACJH,IAAAG,cAAA,UACEH,IAAAG,cAACK,EAAK,CAACK,SAAU,CAAC,kBAAmB,qBAAsB,4BAE7Db,IAAAG,cAAA,OAAK0B,UAAU,UACb7B,IAAAG,cAACJ,EAAM,YAUR6B,QCpBKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrC,OAAOF,IAAAG,cAACyB,EAAG,MAAKY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.9d9e27f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bannerImage.58eb5b98.jpg\";","/* eslint-disable react/jsx-no-target-blank */\r\nimport React from 'react';\r\n\r\nexport default class Social extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <a href=\"https://facebook.com/dragon7794\" target=\"_blank\">\r\n                    <i class=\"fa fa-facebook-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                &nbsp;\r\n                <a href=\"https://twitter.com/mrunal7794\" target=\"_blank\">\r\n                    <i class=\"fa fa-twitter-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                &nbsp;\r\n                <a href=\"https://linkedin.com/in/mrunal7794\" target=\"_blank\">\r\n                    <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                &nbsp;\r\n                <a href=\"https://github.com/mrunal77\" target=\"_blank\">\r\n                    <i class=\"fa fa-github-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                &nbsp;\r\n                <a href=\"https://www.youtube.com/channel/UCIx_aqCVuGRZ5Wu-I4UY36Q\" target=\"_blank\">\r\n                    <i class=\"fa fa-youtube-square\" aria-hidden=\"true\"></i>\r\n                </a>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Typer.css';\r\nexport default class Typer extends React.Component {\r\n\r\n    static defaultProps = {\r\n        dataText: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: '',\r\n            isDeleting: false,\r\n            loopNum: 0,\r\n            typingSpeed: 130\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleType();\r\n    }\r\n\r\n    handleType = () => {\r\n        const { dataText } = this.props;\r\n        const { isDeleting, loopNum, text, typingSpeed } = this.state;\r\n        const i = loopNum % dataText.length;\r\n        const fullText = dataText[i];\r\n\r\n        this.setState({\r\n            text: isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1),\r\n            typingSpeed: isDeleting ? 30 : 150\r\n        });\r\n\r\n        if (!isDeleting && text === fullText) {\r\n\r\n            setTimeout(() => this.setState({ isDeleting: true }), 500);\r\n\r\n        } else if (isDeleting && text === '') {\r\n\r\n            this.setState({\r\n                isDeleting: false,\r\n                loopNum: loopNum + 1\r\n            });\r\n\r\n        }\r\n\r\n        setTimeout(this.handleType, typingSpeed);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>{this.state.text}</span>\r\n                <span id=\"cursor\" />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport bannerImage from './Assets/Images/bannerImage.jpg'\r\nimport './social_icons/social'\r\nimport Social from './social_icons/social';\r\nimport Tada from 'react-reveal/Tada';\r\nimport Typer from './Typer/Typer'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Tada>\r\n          <header className=\"App-header\">\r\n            <card className=\"card\">\r\n              <img className=\"rounded-circle\" src={bannerImage} alt=\"Mrunal\" />\r\n              <br />\r\n              <h1>Mrunal Meshram</h1>\r\n              <h4>\r\n                <Typer dataText={[\"Hi I am Mrunal!\", \"This is my website\", \"I am a web developer.\"]} />\r\n              </h4>\r\n              <div className=\"awsome\">\r\n                <Social />\r\n              </div>\r\n            </card>\r\n          </header>\r\n        </Tada>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}